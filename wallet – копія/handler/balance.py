import asyncio

import requests

import text
import time
import re

from cachetools import TTLCache

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from create import card_data
from keyboard import keyboard


from mono import check_code, get_exchange_rate, get_statement_list
from text import currency_data, currency_list, currency_data_trns, currency_get

api_cache = TTLCache(maxsize=100, ttl=120)


async def process_conversion(callback):
    # —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä–∞—Ç—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É –≤ —ñ–Ω—à—ñ –≤–∞–ª—é—Ç–º
    name, accounts, data_acc, card_n = await get_data_from_card_user(callback.from_user.id)
    global flag_base
    await callback.message.edit_text("<i>‚è≥ –æ—Ç—Ä–∏–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω–Ω—ñ, —Å–µ–∫—É–Ω–¥—É...</i>", parse_mode='HTML')
    await asyncio.sleep(0.1)

    base_currency = currency_get.get(list(currency_get.values()).index(data_acc) + 1)
    print(base_currency)
    print(data_acc)
    euro_amount = accounts

    results = []
    for target_currency in currency_list:
        if target_currency == base_currency:
            continue

        exchange_rate = await get_exchange_rate(target_currency, data_acc)
        converted_amount = euro_amount * exchange_rate
        flag_base = currency_data.get(list(currency_get.keys())[list(currency_get.values()).index(base_currency)])
        flag_target = currency_data.get(list(currency_get.keys())[list(currency_get.values()).index(target_currency)])

        result_line = f'<b>{converted_amount:.2f}</b>  <i>{flag_target} ({currency_data_trns[target_currency]})</i>'
        results.append(result_line)

    unique_results = list(set(results))
    result_text = "\n".join(unique_results)
    await callback.message.edit_text(f'<i>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å</i> <b>{euro_amount:.2f} '
                                     f'{flag_base}</b>.\n\n<i>üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É —ñ–Ω—à—ñ –≤–∞–ª—é—Ç–∏:</i>\n\n{result_text}',
                                     reply_markup=keyboard.back_conv(), parse_mode="HTML")


class FSM(StatesGroup):  # –∫–ª–∞—Å –¥–ª—è —Ñ—Å–º –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É
    bal = State()
    welcome = State()
    pred = State()
    card = State()


async def get_data_from_card_user(user_id):
    # –æ—Ç—Ä–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    global api_cache

    if user_id in api_cache:
        timestamp, data = api_cache[user_id]
        if time.time() - timestamp < 60:
            return data

    response = await check_code(user_id)
    if response.status_code == 200:
        data = response.json()
        name = data['name']
        accounts = data['accounts'][0]['balance'] / 100.0
        data_acc = data['accounts'][0]['cashbackType']
        card_n = data['accounts'][0]['maskedPan'][0]
        print(data['clientId'])

        api_cache[user_id] = (time.time(), (name, accounts, data_acc, card_n))

        return name, accounts, data_acc, card_n
    else:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ:", response.status_code)


async def money(callback: types.CallbackQuery):
    # –æ–±—Ä–æ–±–∫–∞ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    if card_data.get_user_card(callback.from_user.id) == "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ":
        name, accounts, data_acc, card_n = await get_data_from_card_user(callback.from_user.id)
        if callback.data == "main_balance":
            if card_data.get_user_card(callback.from_user.id) != "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ":
                await callback.message.edit_text(
                    f"<i>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞—î</i> <b>{accounts} {data_acc}</b>",
                    reply_markup=keyboard.balance(top_up_available=True), parse_mode='HTML')
            else:
                await callback.message.edit_text(
                    f"<i>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞—î</i> <b>{accounts} {data_acc}</b>",
                    reply_markup=keyboard.balance(), parse_mode='HTML')

        elif callback.data == "main_costs":
            await callback.message.edit_text(
                "<i>üìä –í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–¥—ñ–π—Å–Ω–µ–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç</i>",
                reply_markup=keyboard.costs_menu(top_up_available=True), parse_mode='HTML')

        elif callback.data == 'main_static':
            await callback.message.edit_text(
                '<i>üìä –í —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —â–æ–¥–æ –≤–∞—à–∏—Ö –ø–æ–ø–æ–≤–Ω–µ–Ω—å —Ç–∞ –≤–∏—Ç—Ä–∞—Ç</i>',
                reply_markup=keyboard.statistick(), parse_mode='HTML')
    else:
        await callback.answer('‚ÅâÔ∏è –ö–∞—Ä—Ç–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞')
    if callback.data == 'main_card':
        try:
            if card_data.get_user_card(callback.from_user.id) == "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ":
                name, accounts, data_acc, card_n = await get_data_from_card_user(callback.from_user.id)
                mess = f"""
üí≥ –ö–∞—Ä—Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞.\n
ü™™ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n
üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {name}
üí∞ –†–∞—Ö—É–Ω–æ–∫: {accounts:.2f} {data_acc}
üõ° –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: {card_n}"""

                await callback.message.edit_text(mess,
                                                 reply_markup=keyboard.back_in_main_card("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç—É", 'delete'))

            else:
                await callback.message.edit_text('‚ÅâÔ∏è –ö–∞—Ä—Ç–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞', reply_markup=keyboard.card_menu())

        except Exception as ex:
            await callback.message.edit_text("‚ÅâÔ∏è –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω")


async def card(callback: types.CallbackQuery):
    # –æ–±—Ä–æ–±–∫–∞ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    if callback.data == 'card_insert':
        await FSM.card.set()
        await callback.message.edit_text("üìç –í–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω", reply_markup=keyboard.back())
    if callback.data == 'card_delete':
        card_data.delete_card(callback.from_user.id)
        await callback.message.edit_text('üóë –ö–∞—Ä—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω', reply_markup=keyboard.card_menu())
    if callback.data == 'card_change':
        await FSM.card.set()
        await callback.message.edit_text("üìç –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω", reply_markup=keyboard.back())


async def add_money(callback: types.CallbackQuery):
    # –æ–±—Ä–æ–±–∫–∞ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    name, accounts, data_acc, card_n = await get_data_from_card_user(callback.from_user.id)
    if callback.data == 'add_konvert':
        await process_conversion(callback)
    elif callback.data == "add_back":
        await callback.message.edit_text(
            text.start_not, reply_markup=keyboard.main_keyboard(), parse_mode="HTML")
    elif callback.data == 'add_back_b':
        await callback.message.edit_text(
            f"<i>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞—î</i> <b>{accounts} {data_acc}</b>",
            reply_markup=keyboard.balance(), parse_mode='HTML')


async def back_all_menu(callback: types.CallbackQuery):
    # –æ–±—Ä–æ–±–∫–∞ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    if callback.data == 'back':
        await callback.message.edit_text(
            text.start_not, reply_markup=keyboard.main_keyboard(), parse_mode="HTML")

    if callback.data == 'back_to_card':
        await callback.message.edit_text('‚ÅâÔ∏è –ö–∞—Ä—Ç–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞', reply_markup=keyboard.card_menu())


async def card_insert(message: types.Message, state: FSMContext):
    # –æ–±—Ä–æ–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ —è–∫–∏–π –≤–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    pattern = re.compile(r'^[a-zA-Z0-9-_]+$')

    if message.text and pattern.match(message.text):
        async with state.proxy() as data:
            url = 'https://api.monobank.ua/personal/client-info'
            headers = {
                'X-Token': f'{message.text}',
            }

            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                await message.answer(
                    f"<i>‚úÖ –í–∞—à —Ç–æ–∫–µ–Ω –ø—Ä–∏–π–Ω—è—Ç–æ</i> <b>{message.text}</b>",
                    reply_markup=keyboard.back_in_main_card("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç—É", 'delete'), parse_mode='HTML')
                card_data.card_add(user_id=message.from_user.id, card=message.text, user_id_card=response.json()['accounts'][0]['id'], card_val='–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ')
                await state.finish()
            else:
                await message.answer(
                    f"<i>‚ùå –í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ</i> <b>{message.text}</b>",
                    reply_markup=keyboard.back_in_main_card('‚ùï –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ç–æ–∫–µ–Ω', 'change'), parse_mode='HTML')
                card_data.card_add(user_id=message.from_user.id, card='message.text', user_id_card='id', card_val='–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ')
                await state.finish()

    else:
        await message.answer(
            f"<i>‚ùå –í–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ</i> <b>{message.text}</b>",
            reply_markup=keyboard.back_in_main_card('–ó–∞–º—ñ–Ω–∏—Ç–∏ —Ç–æ–∫–µ–Ω', 'change'), parse_mode='HTML')
        await state.finish()


async def back_with_fsm_rules(callback: types.CallbackQuery, state: FSMContext):
    # —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ—Å–º –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await callback.message.edit_text(
        text.start_not, reply_markup=keyboard.main_keyboard(), parse_mode="HTML")


def register_balance(dp: Dispatcher):
    # —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    dp.register_message_handler(get_exchange_rate, commands=['p'])
    dp.register_callback_query_handler(money, lambda callback_query: callback_query.data.startswith('main'))
    dp.register_callback_query_handler(card, lambda callback_query: callback_query.data.startswith('card'))
    dp.register_callback_query_handler(add_money, lambda callback_query: callback_query.data.startswith('add'))
    dp.register_callback_query_handler(back_all_menu, lambda callback_query: callback_query.data.startswith('back'))
    dp.register_message_handler(card_insert, state=FSM.card)
    dp.register_callback_query_handler(back_with_fsm_rules, state="*", text='fsm_back')
